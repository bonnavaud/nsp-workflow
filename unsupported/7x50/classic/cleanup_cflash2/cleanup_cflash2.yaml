---
version: '2.0'

cleanup_cflash2:
  type: direct

  description: 'Deletion of old files from CF-card in specified directories'

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   'Cleanup SR OS node cflash'
    author:  'NOKIA NSM'
    version: '1.0.0'
    license: 'BSD-3'
    package: 'SROS Automation'
    deprecated: false
    urls:
      homepage: 'https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50/classic/cleanup_cflash2'
      repository: 'https://github.com/nokia/nsp-workflow'
      bugs: 'https://github.com/nokia/nsp-workflow/issues'
    dependencies:
      platform:
        nspOS: ['18.12', '19.*']
        nfmp: []
      nodal:
        - type: 'Nokia 7x50'
          releases: ['14.0', '15.*', '16.0']
          mgmtmode: ['classic']

  input:
    - host:
    - user:
    - passwd:
    - dirs:   ['cf3:/act']
    - deleteBefore: '2019-04-04T16:00'
    - deleteAge: 3600
    - dryRun: True

  output:
    node: <% $.host %>
    dirs: <% $.dirs %>
    result: <% $.response %>

  tasks:
    getNodeTime:
      action: nsp.sr_cli
      input:
        host: '<% $.host %>'
        username: '<% $.user %>'
        password: '<% $.passwd %>'
        cmd: |
          /show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectories

    readDirectories:
      with-items: dir in <% $.dirs %>
      action: nsp.sr_cli
      input:
        host: '<% $.host %>'
        username: '<% $.user %>'
        password: '<% $.passwd %>'
        cmd: |
          /environment no more
          /file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    applyFilter:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var safeList = {
            "BOF.CFG": 1,
            "CONFIG.CFG": 1,
            "NVRAM.DAT": 1,
            "bootlog.txt": 1,
            "restcntr.txt": 1,
            "nvsys.info": 1,
            "I386-CPM.TIM": 1,
            "I386-IOM.TIM": 1,
            "i386-boot.tim": 1,
            "i386-both.tim": 1,
            "i386-isa-aa.tim": 1,
            "i386-vxrom.bin": 1,
            "CHAIN.C32": 1,
            "LDLINUX.C32": 1,
            "LDLINUX.SYS": 1,
            "LIBCOM32.C32": 1,
            "MENU.C32": 1,
            "SYSLINUX.CFG": 1,
            "libutil_com.c32": 1
          };

          var files = $.dirResults;
          var list = [];
          var re = /^[0-9]{2}/;

          var nodeTime = $.nodeTime["cmd1-/show time\n"][1]
          if ($.deleteBefore != "") {
            var delTime = Date.parse($.deleteBefore);
            var timeZone = "UTC";
          } else {
            var delTime = Date.parse(nodeTime) - 1000*Number($.deleteAge);
            var timeZone = nodeTime.split(/\s+/)[4];
          }

          files.forEach(function(dir) {
            for (var key in dir) {
              var currDir = key.split(/\s/)[5];

              val = dir[key];
              val.forEach(function(cmd) {
                if (cmd.match(re)) {
                  var file = cmd.split(/\s+/);
                  if (!(file[3] in safeList) && (file[2]!=="<DIR>")) {
                    var [hour, minute] = file[1].split(/:/);
                    if ( minute.endsWith("p") && Number(hour)!==12) {
                      hour = Number(hour) + 12;
                    }
                    minute = minute.substring(0, minute.length-1);
                    var fileTime = new Date(file[0]+" "+hour+":"+minute+" "+timeZone);
                    if (Number(fileTime) < delTime) {
                      var fileFdn = currDir + "/" + file[3];
                      list.push(fileFdn);
                    }
                  }
                }
              });
            }
          });
          return list
      publish:
        filteredList: <% task().result %>
      on-success:
        - doneSuccess: <% $.dryRun = True %>
        - buildCLI: <% $.dryRun != True %>

    buildCLI:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var cmds="";
          $.filteredList.forEach(function(fname) {
            cmds += "/file delete "+fname+ " force\n";
          });
          return cmds;
      publish:
        cliCommands: <% task().result %>
      on-success:
        - deleteFiles

    deleteFiles:
      action: nsp.sr_cli
      input:
        host: '<% $.host %>'
        username: '<% $.user %>'
        password: '<% $.passwd %>'
        cmd: '<% $.cliCommands %>'
      publish:
        cliResponse: <% task().result %>
      on-success:
        - chkResponses

    chkResponses:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var status = "True";
          for (var key in $.cliResponse) {
            $.cliResponse[key].forEach(function(line){
              if (line.startsWith("Deleting") && !(line.endsWith("OK"))) {
                status = "False";
              }
            });
          }
          return status;
      publish:
        cliCheck: <% task().result %>
      on-success:
        - doneSuccess: <% $.cliCheck = True %>
        - fail: <% $.cliCheck = False %>

    doneSuccess:
      publish:
        response: <% $.filteredList %>
