version: '2.0'

setup_TLS:
  type: direct

  description: Issue/Reissue and install certs and activate TLS

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   Setup TLS with certificates on Nokia SROS nodes
    author:  NOKIA DEMO
    signature: 05d764ebd1fce2f114b2a1cc88d2fe42b1fbecc64c00d8dc3e0a013cc4efdf23f2c2ef7abbd0f641b41463018e08f106dfa31b9c2a6d8ddb3989a38e4687cf830417757489ce898b11b6e5fd787d84cf4c41691e86d9c1d0e70920bf4848c5d006844ea7c256fe31a33db0d3de26a0acd7acd246d32ab0c8396451d34e8fccab1f4b12ec74961ab33646a8a15039e1d439e481187f280bb852d1dba820350bc7c60d4dbfd4e91dfe9fd1e4355bf1ba1dba278028f566fbd882384e045b816b0e48344e9037097d82500d722869863eb54f14cc99428a986f4417c5648086aadd6d4f8644c3655e53930ab55aa77b89aff2ff2fd305b6bf61f6a0afd1d7b0c118
    version: '1.0.0'
    license: BSD-3
    package: SROS Automation
    deprecated: false
    urls:
      homepage: https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50/classic/setup_TLS
      repository: https://github.com/nokia/nsp-workflow
      bugs: https://github.com/nokia/nsp-workflow/issues
    dependencies:
      platform:
        nspOS: ['19.6']
      nodal:
        - type: 'Nokia 7x50'
          releases: ['16.0', '19.*']
          mgmtmode: ['classic', 'model-driven']

  input:
    - token_auth:
    - neId: '1.1.1.1'

  output:
    result: done
    expDateBefore: <% $.exp_old %>
    expDateAfter: <% $.exp_new %>

  output-on-error:
    result: failed

  tasks:
    getEnvironment:
      action: environment
      publish:
        env: '<% task().result %>'
      on-success:
        checkHost

    checkHost:
      action: std.http
      input:
        url: <% locate_nsp("networkElements") %>/v1/networkElements?filter=neId='<% $.neId %>'
        method: GET
        verify: False
        headers:
          Content-Type: application/json
          Authorization: Bearer <% $.token_auth %>
      publish:
        host: '<% task().result.content.response.data.ipAddress.first() %>'
        hostname: '<% task().result.content.response.data.neName.first() %>'
        hosttype: '<% task().result.content.response.data.sourceType.first() %>'
      on-success:
        - fail: <% task().result.content.response.data = [] %>
        - checkCaCertificate: <% task().result.content.response.data != [] %>

    checkCaCertificate:
      action: std.ssh
      input:
        host: '<% $.env.pki_host %>'
        username: '<% $.env.pki_user %>'
        password: '<% $.env.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          /opt/nsp/os/jre/bin/keytool -list -alias mytelemetryca -keystore /opt/nsp/os/ssl/nsp.truststore -storepass '<% $.env.pki_storepass %>'
      on-error:
        - initializeCA
      on-success:
        - checkHostCertificate

    checkHostCertificate:
      action: std.ssh
      input:
        host: '<% $.env.pki_host %>'
        username: '<% $.env.pki_user %>'
        password: '<% $.env.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
      publish:
        exp_old: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-error:
        - copyCaCertificatesToNode
      on-success:
        - reissueHostCertificate

    reissueHostCertificate:
      action: std.ssh
      input:
        host: '<% $.env.pki_host %>'
        username: '<% $.env.pki_user %>'
        password: '<% $.env.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          cp -f <% $.hostname %>_cert.pem <% $.hostname %>_cert.pem.bak
          cp -f private/<% $.hostname %>_key.pem private/<% $.hostname %>_key.pem.bak
          openssl ca -revoke <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -cert CAcert.pem
          # sed -i '/CN=<% $.hostname %>/d' /etc/pki/CA/index.txt
          openssl genrsa -out private/<% $.hostname %>_key.pem 2048
          openssl req -out <% $.hostname %>_certreq.pem -key private/<% $.hostname %>_key.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=<% $.hostname %>/emailAddress=nobody@nokia.com"
          openssl ca  -out <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -batch -passin "pass:" -days 3650 -cert CAcert.pem -policy policy_anything -extensions SAN -extfile <(printf "[SAN]\nsubjectAltName=IP:<% $.host %>") -infiles <% $.hostname %>_certreq.pem
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
          curl --insecure --user <% $.env.NEuser %>:<% $.env.NEpasswd %> -T <% $.hostname %>_cert.pem sftp://<% $.host %>/cf3:/
          curl --insecure --user <% $.env.NEuser %>:<% $.env.NEpasswd %> -T private/<% $.hostname %>_key.pem sftp://<% $.host %>/cf3:/
      publish:
        exp_new: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-success:
        - activateHostCertificate

    activateHostCertificate:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - admin certificate import type key  input cf3:/<% $.hostname %>_key.pem    output hostkey.crt  format pem
          - admin certificate import type cert input cf3:/<% $.hostname %>_cert.pem   output hostcert.crt format pem
          - admin certificate reload type cert-key-pair hostcert.crt protocol tls key-file hostkey.crt

    initializeCA:
      join: 1
      action: std.ssh
      input:
        host: '<% $.env.pki_host %>'
        username: '<% $.env.pki_user %>'
        password: '<% $.env.pki_password %>'
        cmd: |
          mkdir /opt/nsp/os/ssl/certs/telemetry
          cd /opt/nsp/os/ssl/certs/telemetry
          mkdir private
          openssl genrsa -out private/CAkey.pem 2048
          openssl req -out CAreq.pem -key private/CAkey.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=NSP Development Root CA/emailAddress=nobody@nokia.com"
          touch /etc/pki/CA/index.txt
          openssl ca -out CAcert.pem -keyfile private/CAkey.pem -batch -days 3650 -selfsign -create_serial -passin "pass:" -extensions v3_ca -infiles CAreq.pem
          echo 01 > /etc/pki/CA/crlnumber
          openssl ca -out CAcrl.pem -keyfile private/CAkey.pem -batch -gencrl -cert CAcert.pem -passin "pass:"
          openssl genrsa -out private/key.pem 2048
          openssl x509 -outform der -in CAcert.pem -out CAcert.der
          unalias cp
          cp -f /opt/nsp/os/ssl/nsp.truststore /opt/nsp/os/ssl/nsp.truststore.bak
          echo -e "y" | /opt/nsp/os/jre/bin/keytool -import -alias myTelemetryCa -keystore /opt/nsp/os/ssl/nsp.truststore -file /opt/nsp/os/ssl/certs/telemetry/CAcert.der -storepass '<% $.env.pki_storepass %>'
      on-success:
        - copyCaCertificatesToNode

    copyCaCertificatesToNode:
      join: 1
      action: std.ssh
      input:
        host: '<% $.env.pki_host %>'
        username: '<% $.env.pki_user %>'
        password: '<% $.env.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          curl --insecure --user <% $.env.NEuser %>:<% $.env.NEpasswd %> -T CAcert.pem sftp://<% $.host %>/cf3:/
          curl --insecure --user <% $.env.NEuser %>:<% $.env.NEpasswd %> -T CAcrl.pem sftp://<% $.host %>/cf3:/
      on-success:
        - createHostCertificate

    createHostCertificate:
      action: std.ssh
      input:
        host: '<% $.env.pki_host %>'
        username: '<% $.env.pki_user %>'
        password: '<% $.env.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          openssl genrsa -out private/<% $.hostname %>_key.pem 2048
          openssl req -out <% $.hostname %>_certreq.pem -key private/<% $.hostname %>_key.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=<% $.hostname %>/emailAddress=nobody@nokia.com"
          openssl ca  -out <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -batch -passin "pass:" -days 3650 -cert CAcert.pem -policy policy_anything -extensions SAN -extfile <(printf "[SAN]\nsubjectAltName=IP:<% $.host %>") -infiles <% $.hostname %>_certreq.pem
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
          curl --insecure --user <% $.env.NEuser %>:<% $.env.NEpasswd %> -T <% $.hostname %>_cert.pem sftp://<% $.host %>/cf3:/
          curl --insecure --user <% $.env.NEuser %>:<% $.env.NEpasswd %> -T private/<% $.hostname %>_key.pem sftp://<% $.host %>/cf3:/
      publish:
        exp_old: none
        exp_new: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-success:
        - importKeyAndCerts

    importKeyAndCerts:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - admin certificate import type cert input cf3:/<% $.hostname %>_cert.pem   output hostcert.crt format pem
          - admin certificate import type key  input cf3:/<% $.hostname %>_key.pem    output hostkey.crt  format pem
          - admin certificate import type cert input cf3:/CAcert.pem output cacert.crt format pem
          - admin certificate import type crl  input cf3:/CAcrl.pem  output cacrl.crt  format pem
      on-success:
        - configureTLS_classic: <% $.hosttype = 'nfmp' %>
        - configureTLS_MD: <% $.hosttype = 'mdm' %>

    configureTLS_classic:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - configure system security pki ca-profile "tls-ca" create
          - cert-file "cacert.crt"
          - crl-file "cacrl.crt"
          - no shutdown
          - exit all
          - configure system security tls cert-profile "tls-certs" create
          - entry 1 create
          - cert "hostcert.crt"
          - key "hostkey.crt"
          - exit
          - no shutdown
          - exit all
          - configure system security tls server-cipher-list "tls-ciphers" create
          - cipher 1 name tls-rsa-with-null-md5
          - cipher 2 name tls-rsa-with-null-sha
          - cipher 3 name tls-rsa-with-null-sha256
          - cipher 4 name tls-rsa-with3des-ede-cbc-sha
          - cipher 5 name tls-rsa-with-aes128-cbc-sha
          - cipher 6 name tls-rsa-with-aes256-cbc-sha
          - cipher 7 name tls-rsa-with-aes128-cbc-sha256
          - cipher 8 name tls-rsa-with-aes256-cbc-sha256
          - exit all
          - configure system security tls server-tls-profile "tls-server-profile" create
          - cert-profile "tls-certs"
          - cipher-list  "tls-ciphers"
          - no shutdown
          - exit all

    configureTLS_MD:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - edit-config private
          - configure system security pki ca-profile "tls-ca" admin-state enable
          - configure system security pki ca-profile "tls-ca" cert-file "cacert.crt"
          - configure system security pki ca-profile "tls-ca" crl-file "cacrl.crt"
          - configure system security tls cert-profile "tls-certs" admin-state enable
          - configure system security tls cert-profile "tls-certs" entry 1 certificate-file "hostcert.crt"
          - configure system security tls cert-profile "tls-certs" entry 1 key-file "hostkey.crt"
          - configure system security tls server-cipher-list "tls-ciphers" cipher 1 name tls-rsa-with-null-md5
          - configure system security tls server-cipher-list "tls-ciphers" cipher 2 name tls-rsa-with-null-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 3 name tls-rsa-with-null-sha256
          - configure system security tls server-cipher-list "tls-ciphers" cipher 4 name tls-rsa-with3des-ede-cbc-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 5 name tls-rsa-with-aes128-cbc-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 6 name tls-rsa-with-aes256-cbc-sha
          - configure system security tls server-cipher-list "tls-ciphers" cipher 7 name tls-rsa-with-aes128-cbc-sha256
          - configure system security tls server-cipher-list "tls-ciphers" cipher 8 name tls-rsa-with-aes256-cbc-sha256
          - configure system security tls server-tls-profile "tls-server-profile" admin-state enable
          - configure system security tls server-tls-profile "tls-server-profile" cert-profile "tls-certs"
          - configure system security tls server-tls-profile "tls-server-profile" cipher-list "tls-ciphers"
          - commit
        queryParams:
          prompt-begin-command": "/!md-cli"

...
