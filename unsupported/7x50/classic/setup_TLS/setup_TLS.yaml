---
version: '2.0'

setup_TLS:
  type: direct

  description: Issue/Reissue and install certs and activate TLS

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   Setup TLS with certificates on Nokia SROS nodes
    author:  NOKIA NSM
    version: '1.0.0'
    license: BSD-3
    package: SROS Automation
    deprecated: false
    urls:
      homepage: https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50/classic/setup_TLS
      repository: https://github.com/nokia/nsp-workflow
      bugs: https://github.com/nokia/nsp-workflow/issues
    dependencies:
      platform:
        nspOS: ['18.12', '19.*']
        nfmp: []
      nodal:
        - type: 'Nokia 7x50'
          releases: ['14.0', '15.*', '16.0']
          mgmtmode: ['classic']

  input:
    - pki_host: 'localhost'
    - pki_user: 'root'
    - pki_password: 'changeme'
    - host: '135.228.155.151'
    - hostname: 'sim151'
    - username: 'admin'
    - password: 'admin'

  output:
    result: done
    expDateBefore: <% $.exp_old %>
    expDateAfter: <% $.exp_new %>

  output-on-error:
    result: failed

  tasks:
    checkHostCertificate:
      action: std.ssh
      input:
        host: '<% $.pki_host %>'
        username: '<% $.pki_user %>'
        password: '<% $.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
      publish:
        exp_old: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      publish-on-error:
        exp_old: none
      on-error:
        - checkCaCertificate
      on-success:
        - reissueHostCertificate

    reissueHostCertificate:
      action: std.ssh
      input:
        host: '<% $.pki_host %>'
        username: '<% $.pki_user %>'
        password: '<% $.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          cp -f <% $.hostname %>_cert.pem <% $.hostname %>_cert.pem.bak
          cp -f private/<% $.hostname %>_key.pem private/<% $.hostname %>_key.pem.bak
          openssl ca -revoke <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -cert CAcert.pem
          # sed -i '/CN=<% $.hostname %>/d' /etc/pki/CA/index.txt
          openssl genrsa -out private/<% $.hostname %>_key.pem 2048
          openssl req -out <% $.hostname %>_certreq.pem -key private/<% $.hostname %>_key.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=<% $.hostname %>/emailAddress=nobody@nokia.com"
          openssl ca  -out <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -batch -passin "pass:" -days 3650 -cert CAcert.pem -policy policy_anything -extensions SAN -extfile <(printf "[SAN]\nsubjectAltName=IP:<% $.host %>") -infiles <% $.hostname %>_certreq.pem
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
          curl --insecure --user <% $.username %>:<% $.password %> -T <% $.hostname %>_cert.pem sftp://<% $.host %>/cf3:/
          curl --insecure --user <% $.username %>:<% $.password %> -T private/<% $.hostname %>_key.pem sftp://<% $.host %>/cf3:/
      publish:
        exp_new: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-success:
        - activateHostCertificate

    activateHostCertificate:
      action: nsp.sr_cli
      input:
        host: '<% $.host %>'
        username: '<% $.username %>'
        password: '<% $.password %>'
        cmd:
          - admin certificate import type key  input cf3:/<% $.hostname %>_key.pem    output hostkey.crt  format pem
          - admin certificate import type cert input cf3:/<% $.hostname %>_cert.pem   output hostcert.crt format pem
          - admin certificate reload type cert-key-pair hostcert.crt protocol tls key-file hostkey.crt

    checkCaCertificate:
      action: std.ssh
      input:
        host: '<% $.pki_host %>'
        username: '<% $.pki_user %>'
        password: '<% $.pki_password %>'
        cmd: |
          /opt/nsp/os/jre/bin/keytool -list -alias mytelemetryca -keystore /opt/nsp/os/ssl/nsp.truststore -storepass 'NokiaNsp1!'
      on-error:
        - createCaCertificate
      on-success:
        - copyCaCertificatesToNode

    createCaCertificate:
      action: std.ssh
      input:
        host: '<% $.pki_host %>'
        username: '<% $.pki_user %>'
        password: '<% $.pki_password %>'
        cmd: |
          mkdir /opt/nsp/os/ssl/certs/telemetry
          cd /opt/nsp/os/ssl/certs/telemetry
          mkdir private
          openssl genrsa -out private/CAkey.pem 2048
          openssl req -out CAreq.pem -key private/CAkey.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=NSP Development Root CA/emailAddress=nobody@nokia.com"
          touch /etc/pki/CA/index.txt
          openssl ca -out CAcert.pem -keyfile private/CAkey.pem -batch -days 3650 -selfsign -create_serial -passin "pass:" -extensions v3_ca -infiles CAreq.pem
          echo 01 > /etc/pki/CA/crlnumber
          openssl ca -out CAcrl.pem -keyfile private/CAkey.pem -batch -gencrl -cert CAcert.pem -passin "pass:"
          openssl genrsa -out private/key.pem 2048
          openssl x509 -outform der -in CAcert.pem -out CAcert.der
          unalias cp
          cp -f /opt/nsp/os/ssl/nsp.truststore /opt/nsp/os/ssl/nsp.truststore.bak
          echo -e "y" | /opt/nsp/os/jre/bin/keytool -import -alias myTelemetryCa -keystore /opt/nsp/os/ssl/nsp.truststore -file /opt/nsp/os/ssl/certs/telemetry/CAcert.der -storepass "NokiaNsp1!"
      on-success:
        - copyCaCertificatesToNode

    copyCaCertificatesToNode:
      join: 1
      action: std.ssh
      input:
        host: '<% $.pki_host %>'
        username: '<% $.pki_user %>'
        password: '<% $.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          curl --insecure --user <% $.username %>:<% $.password %> -T CAcert.pem sftp://<% $.host %>/cf3:/
          curl --insecure --user <% $.username %>:<% $.password %> -T CAcrl.pem sftp://<% $.host %>/cf3:/
      on-success:
        - createHostCertificate

    createHostCertificate:
      action: std.ssh
      input:
        host: '<% $.pki_host %>'
        username: '<% $.pki_user %>'
        password: '<% $.pki_password %>'
        cmd: |
          cd /opt/nsp/os/ssl/certs/telemetry
          openssl genrsa -out private/<% $.hostname %>_key.pem 2048
          openssl req -out <% $.hostname %>_certreq.pem -key private/<% $.hostname %>_key.pem -new -passin "pass:" -subj "/C=CA/ST=Ontario/L=Ottawa/O=Nokia/OU=NSM/CN=<% $.hostname %>/emailAddress=nobody@nokia.com"
          openssl ca  -out <% $.hostname %>_cert.pem -keyfile private/CAkey.pem -batch -passin "pass:" -days 3650 -cert CAcert.pem -policy policy_anything -extensions SAN -extfile <(printf "[SAN]\nsubjectAltName=IP:<% $.host %>") -infiles <% $.hostname %>_certreq.pem
          openssl x509 -text -in <% $.hostname %>_cert.pem | grep "Not After"
          curl --insecure --user <% $.username %>:<% $.password %> -T <% $.hostname %>_cert.pem sftp://<% $.host %>/cf3:/
          curl --insecure --user <% $.username %>:<% $.password %> -T private/<% $.hostname %>_key.pem sftp://<% $.host %>/cf3:/
      publish:
        exp_new: <% regex("\s+Not After :\s+([^\n]+)\n").replace(task().result, "\\1") %>
      on-success:
        - importKeyAndCerts

    importKeyAndCerts:
      action: nsp.sr_cli
      input:
        host: '<% $.host %>'
        username: '<% $.username %>'
        password: '<% $.password %>'
        cmd:
          - admin certificate import type cert input cf3:/<% $.hostname %>_cert.pem   output hostcert.crt format pem
          - admin certificate import type key  input cf3:/<% $.hostname %>_key.pem    output hostkey.crt  format pem
          - admin certificate import type cert input cf3:/CAcert.pem output cacert.crt format pem
          - admin certificate import type crl  input cf3:/CAcrl.pem  output cacrl.crt  format pem
      on-success:
        - configureTLS

    configureTLS:
      action: nsp.sr_cli
      input:
        host: '<% $.host %>'
        username: '<% $.username %>'
        password: '<% $.password %>'
        cmd:
          - configure system security pki ca-profile "tls-ca" create
          - cert-file "cacert.crt"
          - crl-file "cacrl.crt"
          - no shutdown
          - exit all
          - configure system security tls cert-profile "tls-certs" create
          - entry 1 create
          - cert "hostcert.crt"
          - key "hostkey.crt"
          - exit
          - no shutdown
          - exit all
          - configure system security tls server-cipher-list "tls-ciphers" create
          - cipher 1 name tls-rsa-with-null-md5
          - cipher 2 name tls-rsa-with-null-sha
          - cipher 3 name tls-rsa-with-null-sha256
          - cipher 4 name tls-rsa-with3des-ede-cbc-sha
          - cipher 5 name tls-rsa-with-aes128-cbc-sha
          - cipher 6 name tls-rsa-with-aes256-cbc-sha
          - cipher 7 name tls-rsa-with-aes128-cbc-sha256
          - cipher 8 name tls-rsa-with-aes256-cbc-sha256
          - exit all
          - configure system security tls server-tls-profile "tls-server-profile" create
          - cert-profile "tls-certs"
          - cipher-list  "tls-ciphers"
          - no shutdown
          - exit all
...
