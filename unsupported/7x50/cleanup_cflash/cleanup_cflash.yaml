version: '2.0'

cleanup_cflash:
  type: direct

  description: Deletion of old files from CF-card in specified directories

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   Cleanup SR OS node cflash
    author:  NOKIA DEMO
    signature: 04d8d1660ec132ee8d9775ffbf3dad1fb89b6e454113ada1772b1fba84d14823577971936d50a58c82da74ce01e875f839cf632535feb80d695f03f597ff3c40df458e1c84f2f8c449616faf537c7535f1fb0b1a5751bc9a78cf684b4c838acc8e18064607d846f602609d145c872d87c071dd72ec76fe284eb4380d6e3db0dbdb2eef199a315c6fcb7a1b878c644fdebb50ca895335ee8c74042c71d52033bb02aa0e54010ed899cd8bf8f230deed3cda4e074259ed338c41004712e1d72d1697ae2c7b6f65be418b45e6e1d2201119d9a9f977d7efc6b3f30ccd71b9a3c8aa174b97360b563e8f2d2b76041830811d86773f2a10fed038dcc240d889f4a23a
    version: '1.0.0'
    license: BSD-3
    package: SROS Automation
    deprecated: false
    urls:
      homepage: https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50/cleanup_cflash
      repository: https://github.com/nokia/nsp-workflow
      bugs: https://github.com/nokia/nsp-workflow/issues
    dependencies:
      platform:
        nspOS: ['19.6']
      nodal:
        - type: 'Nokia 7x50'
          releases: ['19.5']
          mgmtmode: ['classic', 'model-driven']

  input:
    - token_auth:
    - neId: 1.1.1.1
    - dirs: ['cf1:/demo', 'cf1:/act']
    - deleteBefore: '2019-05-01T00:00'
    - deleteAge: 3600
    - concurrency: 1
    - dryRun: true

  output:
    result: done
    filesDeleted: <% $.fileList %>

  output-on-error:
    result: failed

  tasks:
    checkHost:
      action: std.http
      input:
        url: <% locate_nsp("networkElements") %>/v1/networkElements?filter=neId='<% $.neId %>'
        method: GET
        verify: False
        headers:
          Content-Type: application/json
          Authorization: Bearer <% $.token_auth %>
      publish:
        hostInfo: '<% task().result.content.response.data %>'
      on-success:
        - fail: <% $.hostInfo = [] %>
        - getHostInfo: <% $.hostInfo != [] %>

    getHostInfo:
      action: std.noop
      publish:
        hosttype: <% $.hostInfo.sourceType.first() %>
      on-success:
        - getNodeTimeMDM: <% $.hosttype = 'mdm' %>
        - getNodeTimeNFMP: <% $.hosttype = 'nfmp' %>

    getNodeTimeMDM:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - show time
      publish:
        nodeTime: <% task().result.data.responses["command_2"][0] %>
      on-success:
        - readDirectoriesMDM

    getNodeTimeNFMP:
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectoriesNFMP

    readDirectoriesMDM:
      with-items: dir in <% $.dirs %>
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result.data.responses %>
      on-success:
        - applyFilter

    readDirectoriesNFMP:
      with-items: dir in <% $.dirs %>
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    applyFilter:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var safeList = ['bof.cfg', 'config.cfg', 'NVRAM.DAT', 'bootlog.txt', 'boot.ldr'];

          var files = $.dirResults;
          var delAge = <% int($.deleteAge) %>;
          var delBefore = $.deleteBefore
          var nodeTime = $.nodeTime["cmd1-show time"][1];

          if (delAge > 0) {
            var delTime = Date.parse(nodeTime) - 1000*delAge;
            var timeZone = nodeTime.split(/\s+/)[4];
          } else if (deleteBefore !== "") {
            var delTime = Date.parse(deleteBefore);
            var timeZone = "UTC";
          } else {
            var delTime = Date.parse(nodeTime);
            var timeZone = nodeTime.split(/\s+/)[4];
          }
          var fileList = [];
          files.forEach(function(dir) {
            dir["command_3"].forEach(function(cmd) {
              if (cmd.match(/^Directory of /)){
                currDir = cmd.split(' ')[2]
              }
              else if (cmd.match(/^[0-9]{2}/)) {
                var file = cmd.split(/\s+/);
                if (!(safeList.indexOf(file[3])>-1) && (file[2]!=="<DIR>")) {
                  var [hour, minute] = file[1].split(/:/);
                  if ( minute.endsWith("p") && Number(hour)!==12) {
                    hour = Number(hour) + 12;
                  }
                  minute = minute.substring(0, minute.length-1);
                  var fileTime = new Date(file[0]+" "+hour+":"+minute+" "+timeZone);
                  if (Number(fileTime) < delTime) {
                    var fileFdn = currDir + "/" + file[3];
                    fileList.push(fileFdn);
                  }
                }
              }
            })
          })
          return fileList;

      publish:
        fileList: <% task().result %>
      on-success:
        - deleteFilesMDM: <% dryRun != true and $.hosttype = 'mdm' %>
        - deleteFilesNFMP: <% dryRun != true and $.hosttype = 'nfmp' %>

    deleteFilesMDM:
      with-items: file in <% $.fileList %>
      concurrency: <% int($.concurrency) %>
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - file delete <% $.file %> force
      publish:
        cliResponse: <% task().result %>

    deleteFilesNFMP:
      with-items: file in <% $.fileList %>
      concurrency: <% int($.concurrency) %>
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - file delete <% $.file %> force
      publish:
        cliResponse: <% task().result %>

...
