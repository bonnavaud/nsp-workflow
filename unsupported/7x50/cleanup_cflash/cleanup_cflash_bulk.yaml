version: '2.0'

cleanup_cflash:
  type: direct

  description: Deletion of old files from CF-card in specified directories

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   Cleanup SR OS node cflash
    author:  NOKIA DEMO
    signature: 75f334bc65fdc3ca64c8332aecfebc39677c6c2a24cb9f6b26dd2d69d2b9f394b767b4d03d63fce4af8c7a92a55b9c702137d1ae21138cd7e45292d49159784f53e44e8fb65368eade4dc242f7b7cff45b1e0bbcb56d8fe97ffeca92643bfd4b0e09f48be251afaf45a90c79b662ce0f7f6b62a4262e37df83cfb118a1a45a11d04da048f2bb2b1296e0394ed2ec62e805f4c13431d029c8d89b7fe5bc48716897aa0bacdaa76306fa5738dcfc2ce47318515363df0bcb3b0070ac3cdb351f91a8a5efe34278fe76d6d9b4345f900789b5136db228a401a3e4b7ebab6e4b18828af7c6335a535ae6cd2db0d34a3190cf73281731c9c582618c507c48dce45fbe
    version: '1.0.0'
    license: BSD-3
    package: SROS Automation
    deprecated: false
    urls:
      homepage: https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50/cleanup_cflash
      repository: https://github.com/nokia/nsp-workflow
      bugs: https://github.com/nokia/nsp-workflow/issues
    dependencies:
      platform:
        nspOS: ['19.6']
      nodal:
        - type: 'Nokia 7x50'
          releases: ['19.5']
          mgmtmode: ['classic', 'model-driven']

  input:
    - token_auth:
    - host:   138.120.48.245
    - dirs: ['cf1:/demo', 'cf1:/act']
    - deleteBefore: '2019-05-01T00:00'
    - deleteAge: 3600
    - dryRun: true

  output:
    result: done
    filesDeleted: <% $.fileList %>

  output-on-error:
    result: failed

  tasks:
    checkHost:
      action: std.http
      input:
        url: <% locate_nsp("networkElements") %>/v1/networkElements?filter=neId='<% $.neId %>'
        method: GET
        verify: False
        headers:
          Content-Type: application/json
          Authorization: Bearer <% $.token_auth %>
      publish:
        hostInfo: '<% task().result.content.response.data %>'
      on-success:
        - fail: <% $.hostInfo = [] %>
        - getHostInfo: <% $.hostInfo != [] %>

    getHostInfo:
      action: std.noop
      publish:
        hosttype: <% $.hostInfo.sourceType.first() %>
      on-success:
        - getNodeTimeMDM: <% $.hosttype = 'mdm' %>
        - getNodeTimeNFMP: <% $.hosttype = 'nfmp' %>

    getNodeTimeMDM:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectoriesMDM

    getNodeTimeNFMP:
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectoriesNFMP

    readDirectoriesMDM:
      with-items: dir in <% $.dirs %>
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    readDirectoriesNFMP:
      with-items: dir in <% $.dirs %>
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    applyFilter:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var safeList = ['bof.cfg', 'config.cfg', 'NVRAM.DAT', 'bootlog.txt', 'boot.ldr'];

          var files = $.dirResults;
          var delAge = <% int($.deleteAge) %>;
          var delBefore = $.deleteBefore
          var nodeTime = $.nodeTime["cmd1-show time"][1];

          if (delAge > 0) {
            var delTime = Date.parse(nodeTime) - 1000*delAge;
            var timeZone = nodeTime.split(/\s+/)[4];
          } else if (deleteBefore != "") {
            var delTime = Date.parse(deleteBefore);
            var timeZone = "UTC";
          } else {
            var delTime = Date.parse(nodeTime);
            var timeZone = nodeTime.split(/\s+/)[4];
          }

          var fileList = [];
          files.forEach(function(dir) {
            for (var key in dir) {
              if (key.startsWith("cmd2-")) {
                var currDir = key.split(/\s/)[2];
                dir[key].forEach(function(cmd) {
                  if (cmd.match(/^[0-9]{2}/)) {
                    var file = cmd.split(/\s+/);
                    if (!(safeList.indexOf(file[3])>-1) && (file[2]!=="<DIR>")) {
                      var [hour, minute] = file[1].split(/:/);
                      if ( minute.endsWith("p") && Number(hour)!==12) {
                        hour = Number(hour) + 12;
                      }
                      minute = minute.substring(0, minute.length-1);
                      var fileTime = new Date(file[0]+" "+hour+":"+minute+" "+timeZone);
                      if (Number(fileTime) < delTime) {
                        var fileFdn = currDir + "/" + file[3];
                        fileList.push(fileFdn);
                      }
                    }
                  }
                });
              }
            }
          });
          return fileList;

      publish:
        fileList: <% task().result %>
      on-success:
        - buildCLI: <% $.dryRun != true %>

    buildCLI:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var cmdList=[];
          $.fileList.forEach(function(fname) {
            cmdList.push("/file delete "+fname+ " force");
          });
          return cmdList;
      publish:
        cmdList: <% task().result %>
      on-success:
        - deleteFilesMDM: <% $.hosttype = 'mdm' %>
        - deleteFilesNFMP: <% $.hosttype = 'nfmp' %>

    deleteFilesMDM:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds: '<% $.cmdList %>'
      publish:
        cliResponse: <% task().result %>

    deleteFilesNFMP:
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          '<% $.cmdList %>'
      publish:
        cliResponse: <% task().result %>

...
