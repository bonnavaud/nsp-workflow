version: '2.0'

cleanup_cflash_bulk:
  type: direct

  description: Deletion of old files from CF-card in specified directories

  tags:
    - demo workflow by NOKIA

  workflow_meta:
    title:   Cleanup SR OS node cflash
    author:  NOKIA DEMO
    signature: 3bf8d2af56c6f9013f2cdd70efcf1076fed963148528bccb6dafd1f0e11927bca6357eefcdc8f405c03d384ecfbf8ec5513773ca79c6da79d19f51b12a4d8a2e41cb1c32d5e95d58baf5d16bf45eccc70ca82805ad5780b3365b3c4f7fa1b4191526203f00bc57518bf494789fd2ae9486f05093b6a00092062f0f2d9f8c24dd17ea2291cb31fbd63c70dbda2dd3e0828693a4cebf4cc1a500a306c0fc3c95d72aa4be1835da2344dd226a0260e4e92d64fee7465ee6b9c897227208f2e5aa6eb0e21ee29323e3a2a846a0419c5d30e9e2e9adb70ef547a0e2e510839a021fc8a9c677fa24e603cc6848eb02c0427afe8ab374829efa8e593cd3fc1dc8f8f7dd
    version: '1.0.0'
    license: BSD-3
    package: SROS Automation
    deprecated: false
    urls:
      homepage: https://github.com/nokia/nsp-workflow/tree/master/unsupported/7x50/cleanup_cflash
      repository: https://github.com/nokia/nsp-workflow
      bugs: https://github.com/nokia/nsp-workflow/issues
    dependencies:
      platform:
        nspOS: ['19.6']
      nodal:
        - type: 'Nokia 7x50'
          releases: ['19.5']
          mgmtmode: ['classic', 'model-driven']

  input:
    - token_auth:
    - host:   138.120.48.245
    - dirs: ['cf1:/demo', 'cf1:/act']
    - deleteBefore: '2019-05-01T00:00'
    - deleteAge: 3600
    - dryRun: true

  output:
    result: done
    filesDeleted: <% $.fileList %>

  output-on-error:
    result: failed

  tasks:
    checkHost:
      action: std.http
      input:
        url: <% locate_nsp("networkElements") %>/v1/networkElements?filter=neId='<% $.neId %>'
        method: GET
        verify: False
        headers:
          Content-Type: application/json
          Authorization: Bearer <% $.token_auth %>
      publish:
        hostInfo: '<% task().result.content.response.data %>'
      on-success:
        - fail: <% $.hostInfo = [] %>
        - getHostInfo: <% $.hostInfo != [] %>

    getHostInfo:
      action: std.noop
      publish:
        hosttype: <% $.hostInfo.sourceType.first() %>
      on-success:
        - getNodeTimeMDM: <% $.hosttype = 'mdm' %>
        - getNodeTimeNFMP: <% $.hosttype = 'nfmp' %>

    getNodeTimeMDM:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectoriesMDM

    getNodeTimeNFMP:
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - show time
      publish:
        nodeTime: <% task().result %>
      on-success:
        - readDirectoriesNFMP

    readDirectoriesMDM:
      with-items: dir in <% $.dirs %>
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds:
          - /!classic-cli
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    readDirectoriesNFMP:
      with-items: dir in <% $.dirs %>
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          - environment no more
          - file dir <% $.dir %>
      publish:
        dirResults: <% task().result %>
      on-success:
        - applyFilter

    applyFilter:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var safeList = ['bof.cfg', 'config.cfg', 'NVRAM.DAT', 'bootlog.txt', 'boot.ldr'];

          var files = $.dirResults;
          var delAge = <% int($.deleteAge) %>;
          var delBefore = $.deleteBefore
          var nodeTime = $.nodeTime["cmd1-show time"][1];

          if (delAge > 0) {
            var delTime = Date.parse(nodeTime) - 1000*delAge;
            var timeZone = nodeTime.split(/\s+/)[4];
          } else if (deleteBefore != "") {
            var delTime = Date.parse(deleteBefore);
            var timeZone = "UTC";
          } else {
            var delTime = Date.parse(nodeTime);
            var timeZone = nodeTime.split(/\s+/)[4];
          }

          var fileList = [];
          files.forEach(function(dir) {
            for (var key in dir) {
              if (key.startsWith("cmd2-")) {
                var currDir = key.split(/\s/)[2];
                dir[key].forEach(function(cmd) {
                  if (cmd.match(/^[0-9]{2}/)) {
                    var file = cmd.split(/\s+/);
                    if (!(safeList.indexOf(file[3])>-1) && (file[2]!=="<DIR>")) {
                      var [hour, minute] = file[1].split(/:/);
                      if ( minute.endsWith("p") && Number(hour)!==12) {
                        hour = Number(hour) + 12;
                      }
                      minute = minute.substring(0, minute.length-1);
                      var fileTime = new Date(file[0]+" "+hour+":"+minute+" "+timeZone);
                      if (Number(fileTime) < delTime) {
                        var fileFdn = currDir + "/" + file[3];
                        fileList.push(fileFdn);
                      }
                    }
                  }
                });
              }
            }
          });
          return fileList;

      publish:
        fileList: <% task().result %>
      on-success:
        - buildCLI: <% $.dryRun != true %>

    buildCLI:
      action: std.javascript
      input:
        context: <% $ %>
        script: |
          var cmdList=[];
          $.fileList.forEach(function(fname) {
            cmdList.push("/file delete "+fname+ " force");
          });
          return cmdList;
      publish:
        cmdList: <% task().result %>
      on-success:
        - deleteFilesMDM: <% $.hosttype = 'mdm' %>
        - deleteFilesNFMP: <% $.hosttype = 'nfmp' %>

    deleteFilesMDM:
      action: nsp.mdm_cli
      input:
        neId: <% $.neId %>
        authorization: Bearer <% $.token_auth %>
        onError: stop
        verify: False
        cmds: '<% $.cmdList %>'
      publish:
        cliResponse: <% task().result %>

    deleteFilesNFMP:
      action: std.http
      input:
        url: <% locate_nsp("samo_netw") %>/v2/netw/NetworkElement/executeMultiCli/network%3A<% $.neId %>
        method: PUT
        verify: false
        headers:
          Accept: 'application/json'
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token_auth %>'
        body:
          '<% $.cmdList %>'
      publish:
        cliResponse: <% task().result %>

...
