version: '2.0'

SfPortMove:
  description: Use SF to move all services from port 1 to port 2
  type: direct

  tags:
    - Blueprint

  input:
    - token_auth : 'YWRtaW46Tm9raWFOc3AxIQ=='
    - rest_gateway_host : '135.121.148.255'
    - ne1 : '11.11.11.11'
    - ne2 : '33.33.33.33'
    - ne1port : '1/1/12'
    - ne2port : '1/1/12'


  tasks:
    run_get_token:
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>/rest-gateway/rest/api/v1/auth/token'
        method: POST
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Basic <% $.token_auth %>'
        body:
          grant_type: 'client_credentials'
      publish:
        token: <% task().result.content.access_token %>
      on-success:
        - getNeNetwork
 

    getNeNetwork:
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/ne'
        method: GET
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        network: <% task().result %>

      on-success:
        - extractNode1Uuid
      on-error:
        - revoke_token
        - actionFailed
      
    extractNode1Uuid:
      action: std.js
      input:
        context: <% $ %>
        script: |
          var netw = $.network;
          var list = [];
          netw.content.response.data.forEach(function(ne) {
            if (ne.ipAddress === "<% $.ne1 %>" ) {
              list.push(ne.id);
            }
          });
          return list[0]
      publish:
        ne1Uuid: <% task().result %>
      on-success:
        - getNe1Ports
      on-error:
        - revoke_token
        - actionFailed
        
    extractNode2Uuid:
      action: std.js
      input:
        context: <% $ %>
        script: |
          var netw = $.network;
          var list = [];
          netw.content.response.data.forEach(function(ne) {
            if (ne.ipAddress === "<% $.ne2 %>" ) {
              list.push(ne.id);
            }
          });
          return list[0];
      publish:
        ne2Uuid: <% task().result %>
      on-success:
        - getNe2Ports
      on-error:
        - revoke_token
        - actionFailed
        
    getNe1Ports:
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/ports/ne-all/<% $.ne1Uuid %>'
        method: GET
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        ne1Ports: <% task().result %>

      on-success:
        - extractNe1PortUuid
      on-error:
        - revoke_token
        - actionFailed
        
    getNe2Ports:
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/ports/ne-all/<% $.ne2Uuid %>'
        method: GET
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        ne2Ports: <% task().result %>

      on-success:
        - extractNe2PortUuid
      on-error:
        - revoke_token
        - actionFailed
        
        
    extractNe1PortUuid:
      action: std.js
      input:
        context: <% $ %>
        script: |
          var ports = $.ne1Ports;
          var list = [];
          var needle = "Port " + "<% $.ne1port %>" + "$";
          needle = needle.replace(/\//g, '\/');
          var re = new RegExp(needle);
          
          ports.content.response.data.forEach(function(port) {
            if (port.neId === "<% $.ne1Uuid %>" ) {
              if (port.portCapability.eline || port.portCapability.elan || port.portCapability.l3vpn || port.portCapability.ies) {
                if (port.name.match(re)) {
                  list.push(port.id);
                }
              }
            }
          });
          return list[0];
      publish:
        ne1PortUuid: <% task().result %>
        ne1Ports: null
      on-success:
        - extractNode2Uuid
      on-error:
        - revoke_token
        - actionFailed
        
    extractNe2PortUuid:
      action: std.js
      input:
        context: <% $ %>
        script: |
          var ports = $.ne2Ports;
          var list = [];
          var needle = "Port " + "<% $.ne2port %>" + "$";
          needle = needle.replace(/\//g, '\/');
          var re = new RegExp(needle);
          
          ports.content.response.data.forEach(function(port) {
            if (port.neId === "<% $.ne2Uuid %>" ) {
              if (port.portCapability.eline || port.portCapability.elan || port.portCapability.l3vpn || port.portCapability.ies) {
                if (port.name.match(re)) {
                  list.push(port.id);
                }
              }
            }
          });
          return list[0];
      publish:
        ne2PortUuid: <% task().result %>
        ne2Ports: null
        network: null
      on-success:
        - getSfServices
      on-error:
        - revoke_token
        - actionFailed
        
        
    getSfServices:
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services'
        method: GET
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        sfServices: <% task().result %>

      on-success:
        - extractServicesForNode
      on-error:
        - revoke_token
        - actionFailed
        
    extractServicesForNode:
      action: std.js
      input:
        context: <% $ %>
        script: |
          var myServices = $.sfServices;
          var list   = [];
          var elines = [];
          var elans  = [];
          var l3vpns = [];
          var ieses  = [];
          myServices.content.response.data.forEach(function(service) {   
           var eline = {};
           service.endpoints.forEach(function(ep) {
             if (ep.neId === "<% $.ne1Uuid %>") {
               if (ep.portId === "<% $.ne1PortUuid %>") {
                 if (service.serviceType === "ELINE") {
                   eline["serviceId"]           = ep.serviceId;
                   eline["serviceType"]         = service.serviceType;
                   eline["service"]             = service;
                   eline["ep1"]                 = ep;
                 } else if (service.serviceType === "ELAN") {
                   elans.push({
                    "serviceId": ep.serviceId, 
                    "serviceType": service.serviceType,
                    "ep": ep
                    });
                 } else if (service.serviceType === "L3_VPN") {
                   var oIsHub = "false"
                   if (ep.isHub) {oIsHub = "true"}
                   l3vpns.push({
                    "serviceId": ep.serviceId, 
                    "serviceType": service.serviceType,
                    "ep": ep
                   });
                 } else if (service.serviceType === "IES") {
                   var oIsHub = "false"
                   if (ep.isHub) {oIsHub = "true"}
                   ieses.push({
                    "serviceId": ep.serviceId, 
                    "serviceType": service.serviceType,
                    "ep": ep
                   }); 
                 }
               }
             }  else {
                 if (service.serviceType === "ELINE") {
                   eline["ep2"] = ep;
                 }
             }
           });
           if (eline.hasOwnProperty('ep1') && eline.hasOwnProperty('ep2')) {
               elines.push(eline);
           }
          });
          list.push(elines);
          list.push(elans);
          list.push(l3vpns);
          list.push(ieses);
          return list;
      publish:
        nodeServices: <% task(extractServicesForNode).result %>   
        sfServices: null
      on-success:
        - moveElineServices
        - moveElanServices
        - moveL3vpnServices
        - moveIesServices
      on-error:
        - revoke_token
        - actionFailed
    
        
    moveElineServices:
      action: std.echo output="<% $.nodeServices[0] %>"
      publish:
        service: "MOVE ELINE SERVICE <% task().result %>"
      on-success:
        - deleteElineService
      on-error:
        - revoke_token
        - actionFailed
        
    deleteElineService:
      with-items: eline in <% $.nodeServices[0] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/<% $.eline.get("serviceId") %>'
        method: DELETE
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        delElineService: <% task(deleteElineService).result %>
      on-success:
        - createElineService
      on-error:
        - revoke_token
        - actionFailed
        
    createElineService:
      with-items: eline in <% $.nodeServices[0] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/elines'
        method: POST
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
        body: |
          { "data": { "readOnly": false, "adminState": "UP", "bidirectional": "<% $.eline.get("service").get("bidirectional") %>", "objective": "<% $.eline.get("service").get("objective") %>", "mtu": <% $.eline.get("service").get("mtu") %>, "maxHops": <% $.eline.get("service").get("maxHops") %>, "maxLatency": <% $.eline.get("service").get("maxLatency") %>, "maxCost": <% $.eline.get("service").get("maxCost") %>, "action": "TRAVERSE", "tenantId": "0", "tunnelSelectionId": "<% $.eline.get("service").get("tunnelSelectionId") %>", "pathProfileId": null, "name": "<% $.eline.get("service").get("name") %>", "endpoints": [ { "id": "<% $.ne2PortUuid %>", "adminState": "UP", "innerTag": <% $.eline.get("ep1").get("innerTag") %>, "outerTag": <% $.eline.get("ep1").get("outerTag") %>, "siteServiceQosProfile": { "qosProfile": 0, "ingressOverrideQueues": null, "egressOverrideQueues": null, "ingressParam": null, "egressParam": null } }, { "id": "<% $.eline.get("ep2").get("portId") %>", "adminState": "UP", "innerTag": <% $.eline.get("ep2").get("innerTag") %>, "outerTag": <% $.eline.get("ep2").get("outerTag") %>, "siteServiceQosProfile": { "qosProfile": 0, "ingressOverrideQueues": null, "egressOverrideQueues": null, "ingressParam": null, "egressParam": null } } ] } }
      publish:
        createElineService: <% task(createElineService).result %>
      on-success:
        - waitForAllServices
      on-error:
        - revoke_token
        - actionFailed
        
    moveElanServices:
      action: std.echo output="<% $.nodeServices[1] %>"
      publish:
        service: "MOVE ELAN SERVICE <% task().result %>"
      on-success:
        - deleteElanPorts
      on-error:
        - revoke_token
        - actionFailed  
        
    deleteElanPorts:
      with-items: elan in <% $.nodeServices[1] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/<% $.elan.get("serviceId") %>/endpoint/<% $.elan.get("ep").get("id") %>'
        method: DELETE
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        delElanPorts: <% task(deleteElanPorts).result %>
      on-success:
        - createElanPorts
      on-error:
        - revoke_token
        - actionFailed
    
    createElanPorts:
      with-items: elan in <% $.nodeServices[1] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/elans/<% $.elan.get("serviceId") %>/endpoint'
        method: POST
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
        body: |
          { "data": { "id": "<% $.ne2PortUuid %>", "appId": null, "adminState": "UP", "customAttributes": [], "customAttributesTemplateId": null, "description": "<% $.elan.get("ep").get("description") %>", "innerTag": <% $.elan.get("ep").get("innerTag") %>, "outerTag": <% $.elan.get("ep").get("outerTag") %>, "siteServiceQosProfile": { "qosProfile": 0, "ingressOverrideQueues": null, "egressOverrideQueues": null, "ingressParam": null, "egressParam": null }, "isHub": false } }
      publish:
        createElanPorts: <% task(createElanPorts).result %>
      on-success:
        - waitForAllServices
      on-error:
        - revoke_token
        - actionFailed
        
    moveL3vpnServices:
      action: std.echo output="<% $.nodeServices[2] %>"
      publish:
        service: "MOVE L3VPN SERVICE <% task().result %>"
      on-success:
        - deleteL3vpnPorts
      on-error:
        - revoke_token
        - actionFailed
        
    deleteL3vpnPorts:
      with-items: l3vpn in <% $.nodeServices[2] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/<% $.l3vpn.get("serviceId") %>/endpoint/<% $.l3vpn.get("ep").get("id") %>'
        method: DELETE
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        delL3vpnPorts: <% task().result %>
      on-success:
        - createL3vpnPorts
      on-error:
        - revoke_token
        - actionFailed
        
    createL3vpnPorts:
      with-items: l3vpn in <% $.nodeServices[2] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/l3-vpns/<% $.l3vpn.get("serviceId") %>/endpoint'
        method: POST
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
        body: |
          { 	"data": {	"id": "<% $.ne2PortUuid %>",	"appId": null,	"adminState": "UP",	"customAttributes": [],	"customAttributesTemplateId": null,	"name": "<% $.l3vpn.get("ep").get("name") %>",	"description": "<% $.l3vpn.get("ep").get("description") %>",	"innerTag": <% $.l3vpn.get("ep").get("innerTag") %>,	"outerTag": <% $.l3vpn.get("ep").get("outerTag") %>,	"siteServiceQosProfile": {	"qosProfile": 0,	"ingressOverrideQueues": null,	"egressOverrideQueues": null,	"ingressParam": null,	"egressParam": null	},	"primaryAddress": {	"ipv6Prefix": null,	"ipv4Prefix": {	"string": "<% $.l3vpn.get("ep").get("ipAddress").get("ipv4Prefix").get("string") %>"	}	},	"secondaryAddresses": [],	"peSideAS": <% $.l3vpn.get("ep").get("peSideAS") %>,	"routingStatic": null,	"routingBgp": null 	} }
      publish:
        createL3VpnPorts: <% task().result %>
      on-success:
        - waitForAllServices
      on-error:
        - revoke_token
        - actionFailed
        
    moveIesServices:
      action: std.echo output="<% $.nodeServices[3] %>"
      publish:
        service: "MOVE IES SERVICE <% task().result %>"
      on-success:
        - deleteIesPorts
      on-error:
        - revoke_token
        - actionFailed
        
    deleteIesPorts:
      with-items: ies in <% $.nodeServices[3] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/<% $.ies.get("serviceId") %>/endpoint/<% $.ies.get("ep").get("id") %>'
        method: DELETE
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
      publish:
        delL3vpnPorts: <% task().result %>
      on-success:
        - createIesPorts
      on-error:
        - revoke_token
        - actionFailed
        
        
    createIesPorts:
      with-items: ies in <% $.nodeServices[3] %>
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>:8543/sdn/api/v4/services/ies/<% $.ies.get("serviceId") %>/endpoint'
        method: POST
        verify: False
        headers:
          Content-Type: 'application/json'
          Authorization: 'Bearer <% $.token %>'
        body: |
         { 	"data": {	"id": "<% $.ne2PortUuid %>",	"appId": null,	"adminState": "UP",	"customAttributes": [],	"customAttributesTemplateId": null,	"name": "<% $.ies.get("ep").get("name") %>",	"description": "<% $.ies.get("ep").get("description") %>",	"innerTag": <% $.ies.get("ep").get("innerTag") %>,	"outerTag": <% $.ies.get("ep").get("outerTag") %>,	"siteServiceQosProfile": {	"qosProfile": 0,	"ingressOverrideQueues": null,	"egressOverrideQueues": null,	"ingressParam": null,	"egressParam": null	},	"primaryAddress": {	"ipv6Prefix": null,	"ipv4Prefix": {	"string": "<% $.ies.get("ep").get("ipAddress").get("ipv4Prefix").get("string") %>"	},	"secondaryAddresses": [],	"routingStatic": null,	"routingBgp": null 	} } }
      publish:
        createL3VpnPorts: <% task().result %>
      on-success:
        - waitForAllServices
      on-error:
        - revoke_token
        - actionFailed
            
    waitForAllServices:
      join: 4
      action: std.echo output="ALL THREADS COMPLETED"
      publish:
        status: "Completed ELINE:<% $.nodeServices[0].len() %> ELAN:<% $.nodeServices[1].len() %> L3VPN:<% $.nodeServices[2].len() %> IES:<% $.nodeServices[3].len() %>"
        nodeServices: null
      on-complete:
        - revoke_token
        
    revoke_token:
      action: std.http
      input:
        url: 'https://<% $.rest_gateway_host %>/rest-gateway/rest/api/v1/auth/revocation'
        method: POST
        verify: False
        headers:
          Content-Type: 'application/x-www-form-urlencoded'
          Authorization: 'Basic <% $.token_auth %>'
        body:  'token=<% $.token %>&token_type_hint=token'
        
    actionFailed:
      action: std.fail
      publish:
        status: Failed


        